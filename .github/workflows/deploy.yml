# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "deploy"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pages: write
      id-token: write
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Codacy analysis
        env:
          CODACY_API_TOKEN: ${{ secrets.CODACY_API_TOKEN }}
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          curl -X POST "https://api.codacy.com/2.0/analysis" \
          -H "Authorization: Bearer $CODACY_API_TOKEN" \
          -d '{ "branch": "main" }'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Install dependencies
        run: npm install --force
        working-directory: ./front-end

      - name: Run Jest Tests and Upload Coverage
        # Disabled temporarily: set the if expression to true or remove this line to re-enable
        if: ${{ false }}
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}  # Ensure it's added in GitHub Secrets
        run: |
          npm run test -- --coverage
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage/lcov.info
        working-directory: ./front-end

   #Angular uses client-side routing. GitHub Pages, by default, doesn't understand Angular's routing structure.
   #GitHub Pages doesn't support fallback routing for Single Page Applications (SPA).
      - name: Build Angular app
        run: npm run build -- --base-href=/angular-nest/
        working-directory: ./front-end

      - name: List contents of dist folder
        run: ls -R ./front-end/dist

      #as "outputPath": "dist/client" in angular.json  
      - name: Upload build artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: ./front-end/dist/front-end/browser
    
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./front-end/dist/front-end/browser
